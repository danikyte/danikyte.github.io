import tkinter as tk
from urllib.parse import urlencode
import requests
import openpyxl
import time
import json
import math
from datetime import datetime

class LoginGUI:

    def __init__(self, root):
        
        self.root = root

        # Set geometry
        self.root.title("Login")

        # Set Window Title
        self.root.geometry("300x150")

        # Set username and password label
        self.username_label = tk.Label(root, text="Username:", font=('Courier New', 10))
        self.password_label = tk.Label(root, text="Password:", font=('Courier New', 10))

        # Set username and password entry box
        self.username_entry = tk.Entry(root, font=('Courier New', 10))
        self.password_entry = tk.Entry(root, show="*", font=('Courier New', 10))

        # Set login button
        self.login_button = tk.Button(root, text="Login", font=('Courier New', 10), command=self.check_login)

        self.username_label.pack()
        self.username_entry.pack()
        
        self.password_label.pack()
        self.password_entry.pack()

        self.login_button.pack(pady=10)
    
    def check_login(self):
        
        # Get username and password entry
        username = self.username_entry.get()
        password = self.password_entry.get()

        # Authentication
        if username == 'dani' and password == '1234':
            self.root.destroy() # Close the login window
            SMSGUI() # Open the main SMS sending window
        else:
            print("Invalid username or password")

def main():
    root = tk.Tk()
    root.iconbitmap('bark.ico')
    login_gui = LoginGUI(root)
    root.mainloop()

class SMSGUI:

    def __init__(self):

        self.root = tk.Tk()

        # Set geometry
        self.root.geometry("525x500")

        # Set Window Title
        self.root.title("Bark SMS Sender")

        # Set message label and Entry Box
        self.message_label = tk.Label(self.root, text="Message:", font=('Courier New', 10))
        self.message_text =  tk.Text(self.root, height=5, width=30, font=('Courier New', 10))

        # Set buttons
        self.send_btn = tk.Button(self.root, text="Send", font=('Courier New', 10),command=self.send_sms)
        self.test_btn = tk.Button(self.root, text="Test", font=('Courier New', 10),command=self.test_sms)
        self.balance_btn = tk.Button(self.root, text="Check Balance", font=('Courier New', 10),command=self.check_balance)

        # Set results text box
        self.results_text = tk.Text(self.root, height=10, width=40)

        # Set buttons, labels, and text boxes using place
        self.message_label.place(x=10, y=10, height=20, width=100)
        self.message_text.place(x=110, y=10, height=200, width=400)
        self.send_btn.place(x=30, y=225, height=30, width=150)
        self.test_btn.place(x=190, y=225, height=30, width=150)
        self.balance_btn.place(x=350, y=225, height=30, width=150)
        self.results_text.place(x=10, y=270, height=200, width=500)

        self.root.mainloop()

    def send_sms(self):
        apikey = 'd7d7608eb99c2c4864f1c36ed030ef9a'
        sendername = 'BarkBlaster'
        message = self.message_text.get("1.0",tk.END)

        excel_file_path = "contact_list.xlsx"
        workbook = openpyxl.load_workbook(excel_file_path)
        sheet = workbook['Data']

        # Do batch sizing for phone numbers
        batchsize = 500 # Maximum number of phone numbers per batch/API call

        startrow_receiver = 2
        lastrow_receiver = sheet.max_row
        totalnumbers = lastrow_receiver - startrow_receiver + 1
        print(totalnumbers)

        # Calculate the number of batches needed
        batchcount = math.ceil(totalnumbers / batchsize)
        print(batchcount)

        currentrow = startrow_receiver
        for batchindex in range(1, batchcount + 1):
            if totalnumbers >= batchsize:
                numbers_in_batch = batchsize
            else:
                numbers_in_batch = totalnumbers

            batchnumbers = ""
            for x in range(2, numbers_in_batch + 2):
                # Get receiver number
                receiver_number = sheet["B" + str(x)].value
                print(receiver_number)

                # Concatenate numbers
                batchnumbers = batchnumbers + str(receiver_number) + ", "
                print(batchnumbers)

                currentrow = currentrow + 1
                totalnumbers = totalnumbers - 1

            # Remove trailing comma and space
            batchnumbers = batchnumbers.rstrip(', ')
            print(batchnumbers)

            params = (
                ('apikey',apikey),
                ('sendername',sendername),
                ('message',message),
                ('number',batchnumbers)
            )

            path = 'https://api.semaphore.co/api/v4/messages?' + urlencode(params)

            response = requests.post(path)

            current_datetime = datetime.now()

            if response.status_code == 200:
                self.results_text.insert(tk.END, f"{current_datetime}, Batch Size: {numbers_in_batch}, Sent successfully!\n")
            else:
                self.results_text.insert(tk.END, f"Failed to send SMS. Status Code: {response.status_code}\n")
        
        time.sleep(1)


    def test_sms(self):
        excel_file_path = "contact_list.xlsx"

        workbook = openpyxl.load_workbook(excel_file_path)
        sheet = workbook['Data']

        apikey = 'd7d7608eb99c2c4864f1c36ed030ef9a'
        sendername = 'BarkBlaster'
        message = self.message_text.get("1.0",tk.END)
        number = sheet["B2"].value

        params = (
            ('apikey',apikey),
            ('sendername',sendername),
            ('message',message),
            ('number',number)
        )
        path = 'https://api.semaphore.co/api/v4/messages?' + urlencode(params)
        
        response = requests.post(path)

        current_datetime = datetime.now()

        if response.status_code == 200:
            self.results_text.insert(tk.END, f"{current_datetime}, Test message sent successfully!\n")
        else:
            self.results_text.insert(tk.END, f"Failed to send SMS. Status Code: {response.status_code}\n" )
        
        self.check_balance()

    def check_balance(self):
        apikey = 'd7d7608eb99c2c4864f1c36ed030ef9a'

        url = "https://api.semaphore.co/api/v4/account"

        params = {
            'apikey':apikey
        }

        try:
            response = requests.get(url, params=params)
            
            # Raise an exception for HTTP errors
            response.raise_for_status()

            balance_info = response.json()
            credit_balance = balance_info.get("credit_balance")

            self.results_text.insert(tk.END, f"Credit Balance: {credit_balance}\n")
        except requests.exceptions.HTTPError as http_err:
            self.results_text.insert(tk.END, f"HTTP Error. Try again after 30 seconds\n")
        except json.JSONDecodeError as json_err:
            self.results_text.insert(tk.END, f"JSON Decode Error. Try again after 30 seconds.\n")
        except Exception as e:
            self.results_text.insert(tk.END, f"An error occurred. Try again after 30 seconds.\n")

if __name__ == "__main__":
    main()
